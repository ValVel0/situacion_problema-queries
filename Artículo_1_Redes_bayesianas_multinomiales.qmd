---
title: "Artículo 1: Redes bayesianas multinomiales"
author: "Vidal López A01253568 | Barush Copado A00573182 | Pedro Silva A01247217 | Diego Barragán A01738369"
format:
   html:
     toc: true
     html-math-method: katex
     embed-resources: true
     self-contained-math: true
     df-print: kable
editor: source
---

## Artículo 1: Redes bayesianas multinomiales

# Librerias usadas

```{r}
library(tidyverse)
library(bnlearn)
```

```{r}
getwd()
```

# Cargando y creando la base de datos optima

```{r}
viaje = read_csv("data/eod_2017/tviaje_eod2017/conjunto_de_datos/tviaje.csv") %>%
  select(id_soc, p5_3, p5_6, p5_7_7, p5_14_01, p5_14_07, p5_14_12, p5_14_14, p5_14_19, p5_14_20) %>%
  mutate(across(everything(), as.factor))  # Convertir todo a factor

dem = read_csv("data/eod_2017/tsdem_eod2017/conjunto_de_datos/tsdem.csv") %>%
  select(id_soc, sexo, edad, ent, niv) %>%
  mutate(across(everything(), as.factor))
```

```{r}
# Unir las tablas por id_soc
base_final = viaje %>%
  left_join(dem, by = "id_soc")
```

```{r}
head(base_final)

# Guardamos el head
head_df = head(base_final)
saveRDS(head_df, "objetos/head_base_final.rds")
```

Verificamos que no contenan valores nulos la base de datos.
```{r}
sum(is.na(base_final))
```

# Generando DAGS

#### DAG_1

```{r}
colnames(base_final) = c("id_soc", "p5_3", "p5_6", "p5_7_7", "p5_14_01", "p5_14_07", "p5_14_12", "p5_14_14", "p5_14_19", "p5_14_20", "sexo", "edad", "ent", "niv")
```

```{r}
dag_1 = empty.graph(nodes = c("sexo", "edad", "niv", "ent", "p5_3", "p5_6", "p5_7_7", 
                             "p5_14_01", "p5_14_07", "p5_14_12", "p5_14_14", "p5_14_19", "p5_14_20"))

arc_set = matrix(c(
  'sexo', 'p5_3',
  'edad', 'p5_3', 
  'niv', 'p5_3',
  
  'sexo', 'p5_6',
  'edad', 'p5_6',
  'niv', 'p5_6',
  'ent', 'p5_6',
  
  'sexo', 'p5_7_7',
  'edad', 'p5_7_7',
  'niv', 'p5_7_7',
  'ent', 'p5_7_7',
  
  'p5_3', 'p5_14_01',
  'p5_6', 'p5_14_01',
  'p5_7_7', 'p5_14_01',
  
  'p5_3', 'p5_14_07',
  'p5_6', 'p5_14_07',
  'p5_7_7', 'p5_14_07',
  
  'p5_3', 'p5_14_12',
  'p5_6', 'p5_14_12',
  'p5_7_7', 'p5_14_12',
  
  'p5_3', 'p5_14_14',
  'p5_6', 'p5_14_14',
  'p5_7_7', 'p5_14_14',
  
  'p5_3', 'p5_14_19',
  'p5_6', 'p5_14_19',
  'p5_7_7', 'p5_14_19',
  
  'p5_3', 'p5_14_20',
  'p5_6', 'p5_14_20',
  'p5_7_7', 'p5_14_20'
  
), byrow = TRUE, ncol = 2,
dimnames = list(NULL, c("from", "to")))

print(arc_set)

arcs(dag_1) = arc_set
```

```{r}
# Verify the structure
dag_1
```
```{r}
dev.new(width=12, height=8)  
graphviz.plot(dag_1, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_dag1.png", width = 1200, height = 800, res = 150)
graphviz.plot(dag_1, shape = "ellipse")
dev.off()
```


#### DAG_2

```{r}
dag_2 = model2network("[sexo][edad][p5_3][ent][p5_6|ent][niv|sexo:edad][p5_7_7|p5_6][p5_14_01|p5_3:sexo:niv:p5_7_7][p5_14_07|p5_3:sexo:niv:p5_7_7][p5_14_12|p5_3:sexo:niv:p5_7_7][p5_14_14|p5_3:sexo:niv:p5_7_7][p5_14_19|p5_3:sexo:niv:p5_7_7][p5_14_20|p5_3:sexo:niv:p5_7_7]")
```

```{r}
dev.new(width=12, height=8)  
graphviz.plot(dag_2, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_dag2.png", width = 1200, height = 800, res = 150)
graphviz.plot(dag_2, shape = "ellipse")
dev.off()
```


```{r}
dag_2
```

#### DAG_3

```{r}
dag_3 = model2network("[sexo][edad][ent][niv|sexo:edad:ent][p5_7_7|ent][p5_6|p5_7_7][p5_3|niv:p5_6][p5_14_01|p5_3][p5_14_07|p5_3][p5_14_12|p5_3][p5_14_14|p5_3][p5_14_19|p5_3][p5_14_20|p5_3]")
```

```{r}
dev.new(width=12, height=8)  
graphviz.plot(dag_3, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_dag3.png", width = 1200, height = 800, res = 150)
graphviz.plot(dag_3, shape = "ellipse")
dev.off()
```


```{r}
dag_3
```

### best_dag

Por medio del algoritmo hill climbing (HC) buscamos el **máximo local**, que representa la mejor DAG con los datos y variables seleccionados.

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
best_dag = hc(base_df)
```

```{r}
best_dag
```

Visualizamos la DAG.

```{r}
dev.new(width=12, height=8)  
graphviz.plot(best_dag, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_best_dag.png", width = 1200, height = 800, res = 150)
graphviz.plot(best_dag, shape = "ellipse")
dev.off()
```

Se puede observar que existen algunas relacionas de dependencia *extrañas* o que no suenan lógicas: como es que el sexo de una persona dependa de p5_14_14 (caminar como medio de transporte) o que la edad dependa de p5_6 (origen del viaje).

Para resolver esto, probaremos hacer restricciones al algoritmo, de modo que el conjunto de DAG's enlistadas no puedan ser candidatas.

Tomaremos como criterio que los nodos enlistados siempre serán padres:

-   sexo: sexo de la persona.
-   p5_3: viaje entre fin de semana o entre semana.
-   Ent: entidad federativa.
-   Edad: edad de la persona.

Los demás nodos podrán, según el algorimo HC, intercalarse para obtener nuevas relaciones de dependencia.

Creamos la nueva DAG con restricciones:

```{r}
fixed_parents = c("p5_3", "sexo", "edad", "ent")
all_nodes = c("p5_3", "sexo", "edad", "ent",
              "p5_6","p5_7_7",
               "p5_14_01","p5_14_07","p5_14_12",
               "p5_14_14","p5_14_19","p5_14_20")
#creamos una blacklist para prohibir
bl = data.frame(
  from = rep(all_nodes, each = length(fixed_parents)),
  to = rep(fixed_parents, times = length(all_nodes))
)

#permitimos que los padres tengan aristas entre ellos
#bl = bl[! (bl$from %in% fixed_parents & bl$to %in% fixed_parents), ]

```

```{r}
dag_restricted_0 = hc(base_df, score = "bic", blacklist = bl)

dag_restricted_0
```

Visualizamos la DAG con restricciones:

```{r}
dev.new(width=12, height=8)  
graphviz.plot(dag_restricted_0, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_dag_restricted_0.png", width = 1200, height = 800, res = 150)
graphviz.plot(dag_restricted_0, shape = "ellipse")
dev.off()
```


Que el sexo dependa del nivel educativo es una relación con no tanta coherencia fuera del algoritmo. Por ello, eliminamos este arco y evaluamos qué tan bueno fue el modelo con posteriores pruebas de hipótesis y con los estadísticos BIC y AIC.

```{r}
# eliminamos la relción de nivel educativo con sexo
dag_restricted = drop.arc(dag_restricted_0, from = "niv", to = "sexo")
#arcs(best_dag)
graphviz.plot(dag_restricted, shape = "ellipse")
```

```{r}
# guardamos la imagen
png("figures/diagrama_dag_restricted.png", width = 1200, height = 800, res = 150)
graphviz.plot(dag_restricted, shape = "ellipse")
dev.off()
```


### Pruebas de hipótesis sobre nodos y dependencias

```{r}
prueba_strength_dag3 = arc.strength(dag_3, data = base_df, criterion = "mi")

# Guardamos prueba
saveRDS(prueba_strength_dag3, "objetos/prueba_strength_dag3.rds")

prueba_strength_dag3
```

```{r}
prueba_strength_best_dag = arc.strength(best_dag, data = base_df, criterion = "mi")

# Guardamos prueba
saveRDS(prueba_strength_best_dag, "objetos/prueba_strength_best_dag.rds")

prueba_strength_best_dag
```

```{r}
# ci.test("sexo", "niv", test = "mi", data = base_df)
prueba_strength_restricted= arc.strength(dag_restricted, data = base_df, criterion = "mi")

# Guardamos la prueba:
# Guardamos prueba
saveRDS(prueba_strength_restricted, "objetos/prueba_strength_restricted.rds")

prueba_strength_restricted
```

Realizamos una prueba de hipótesis para verificar si existen dependencia entre los nodos de la DAG con restricciones.

```{r}
resultados = list()
resultados[["ent_to_p5_7_7"]] = ci.test(x="ent",y="p5_7_7",z=setdiff(parents(dag_restricted,"p5_7_7"),"ent"),data=base_df)
resultados[["edad_to_niv"]] = ci.test(x="edad",y="niv",z=setdiff(parents(dag_restricted,"niv"),"edad"),data=base_df)
resultados[["p5_14_01_to_p5_14_14"]] = ci.test(x="p5_14_01",y="p5_14_14",z=setdiff(parents(dag_restricted,"p5_14_14"),"p5_14_01"),data=base_df)
resultados[["p5_3_to_p5_6"]] = ci.test(x="p5_3",y="p5_6",z=setdiff(parents(dag_restricted,"p5_6"),"p5_3"),data=base_df)
resultados[["p5_6_to_p5_7_7"]] = ci.test(x="p5_6",y="p5_7_7",z=setdiff(parents(dag_restricted,"p5_7_7"),"p5_6"),data=base_df)
resultados[["edad_to_p5_6"]] = ci.test(x="edad",y="p5_6",z=setdiff(parents(dag_restricted,"p5_6"),"edad"),data=base_df)
resultados[["niv_to_p5_14_01"]] = ci.test(x="niv",y="p5_14_01",z=setdiff(parents(dag_restricted,"p5_14_01"),"niv"),data=base_df)
resultados[["p5_14_07_to_p5_14_14"]] = ci.test(x="p5_14_07",y="p5_14_14",z=setdiff(parents(dag_restricted,"p5_14_14"),"p5_14_07"),data=base_df)
resultados[["niv_to_ent"]] = ci.test(x="niv",y="ent",z=setdiff(parents(dag_restricted,"ent"),"niv"),data=base_df)
resultados[["p5_14_01_to_p5_14_07"]] = ci.test(x="p5_14_01",y="p5_14_07",z=setdiff(parents(dag_restricted,"p5_14_07"),"p5_14_01"),data=base_df)

### --- Verificamos las pruebas de hipótesis con el p-value --- ###
# resultados

saveRDS(resultados, "objetos/resultados_p_hipótesis.rds")
```

Con esto confirmamos que $\text{p-value} < 0.05$ para cada caso de los arcos, de manera que se rechaza la hipótesis nula $H_0$ y existe suficiente evidencia estadística para afirmar que las relaciones de dependencia entre los nodos de la DAG con restricciones son significativas.

### Scores de cada una de las DAGs

DAG 1 propuesta:

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
score(dag_1, data = base_df, type = "bic")
score(dag_1, data = base_df, type = "aic")
```

DAG 2 propuesta:

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
score(dag_2, data = base_df, type = "bic")
score(dag_2, data = base_df, type = "aic")
```

DAG 3 propuesta:

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
score(dag_3, data = base_df, type = "bic")
score(dag_3, data = base_df, type = "aic")
```

DAG con algoritmo HC sin restricciones:

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
score(best_dag, data = base_df, type = "bic")
score(best_dag, data = base_df, type = "aic")
```

DAG con algoritmo HC con restricciones:

```{r}
base_df = as.data.frame(base_final[, -1]) %>%
  mutate(across(where(is.factor), droplevels))
score(dag_restricted, data = base_df, type = "bic")
score(dag_restricted, data = base_df, type = "aic")
```

Comparando las 3 DAG's propuestas, observamos que los valores son más negativos (o menores) que los que se obtuvieron por medio del algoritmo HC. Ahora, el método HC sin restricciones encontró una solución bajo el criterio del BIC mejor por su BIC y AIC más grandes, no obstante, tiene relaciones que no son coherentes en la práctica y, por ello, podemos descartarla. La última DAG, con restricciones y el método HC, presenta una variante de la última DAG pero bajo un criterio que corresponde a la realidad; y además de haber pasado por pruebas de hipótesis, tiene un mejor BIC y AIC que las propuestas.

# Aplicación de la DAG y queries

Transformación de los datos para poder realizar análisis y sacar la probabilidad de eventos para así resolver los 4 casos de estudio que se están comprobando. 

```{r}
bn_mle = bn.fit(dag_restricted, data = base_df, method = "mle")
```

```{r}
bn = bn.fit(dag_restricted, data = base_df)
```


### Consulta de probabilidad

Query 1
¿Qué probabilidad hay de que una persona que salga de un hospital en Yucatán haya utilizado un transporte de personal o un automóvil como medio de transporte?
```{r}
prob1 = cpquery(bn,event = (p5_14_01 == "1" | p5_14_19 == "1"), #Utilizó automóvil o transporte de personal
  evidence = (p5_6 == "8" & p5_7_7 == "31"), #Salió de un hospital en Yucatán
  n = 10^6
)
cat("Probabilidad de que una persona haya salido de un hospital en Yucatán haya utilizado transporte de personal o automóvil como medio de transporte:", prob1)
```

Query 2

¿Cuál es la probabilidad de que una persona de 20 años y de sexo femenino, use el tren ligero como medio de transporte dado que es de CDMX?

Para calcular esta probabilidad, se utilizaron variables directas disponibles en la base de datos. El evento de interés es el uso del tren ligero, representado por la variable p5_14_12 con valor "1" (que indica que sí se utilizó este medio de transporte). La evidencia se compone de tres condiciones: la edad de la persona (20 años), su sexo (femenino) y su ubicación (CDMX). Específicamente:

La edad se captura con la variable edad con valor "20".

El sexo femenino se representa con el valor "2" en la variable sexo.

La CDMX se identifica con el código "09" en la variable ent (entidad).

```{r}
prob2 = cpquery(
  bn_mle,
  event = (p5_14_12 == "1"),
  evidence = (edad == "20" & sexo == "2" & ent == "09"),
  n = 10^6
)

cat("Probabilidad de que una persona de 20 años y de sexo femenino use el tren ligero como medio de transporte dado que es de CDMX:", prob2)
```
 El resultado obtenido indica una probabilidad baja (aproximadamente 0.83%), lo que sugiere que el uso del tren ligero en mujeres de 20 años de la CDMX es relativamente poco común en los datos analizados.

Query 3
¿Qué probabilidad hay de que un hombre joven universitario en Jalisco utilice tren ligero durante los días entre semana?

```{r}
prob3 = cpquery(
  bn_mle,
  event = (p5_14_12 == "1" & p5_3 == "1"),   # Usa tren ligero entre semana
  evidence = (
    sexo == "1" &                      # Hombre
    p5_7_7 == "14" &                   # Vive en Jalisco 
    as.numeric(as.character(edad)) > 17 & as.numeric(as.character(edad)) < 30 &           # Joven (18–29 años)
    (niv == "8" | niv == "9")        # Universitario (Licenciatura o Posgrado)
  ),
  n = 10^6
)

cat("Probabilidad de que un hombre joven universitario en Jalisco utilice tren ligero durante los días entre semana:", prob3)
```

```{r}
# Hombres
sum(base_final$sexo == "1", na.rm = TRUE)

# En Jalisco
sum(base_final$p5_7_7 == "14", na.rm = TRUE)

# Jóvenes 
sum({edad_num <- as.numeric(as.character(base_final$edad)); edad_num > 17 & edad_num < 30}, na.rm = TRUE)

# Universitarios
sum(base_final$niv %in% c("8", "9"), na.rm = TRUE)

# Usan tren ligero
sum(base_final$p5_14_12 == "1", na.rm = TRUE)

# Viajan entre semana
sum(base_final$p5_3 == "1", na.rm = TRUE)
```

```{r}
# Registros que cumplen TODAS las condiciones de evidencia
evidencia <- base_final$sexo == "1" & 
             base_final$p5_7_7 == "14" & 
             as.numeric(as.character(base_final$edad)) > 17 & as.numeric(as.character(base_final$edad)) < 30 & 
             (base_final$niv == "8" | base_final$niv == "9")

sum(evidencia, na.rm = TRUE)

base_final[which(evidencia), ]
```
La query sobre la probabilidad de que un hombre joven universitario en Jalisco utilice tren ligero durante los días entre semana arrojó una probabilidad = 0. Este resultado se debe a la baja cantidad de datos registrados de viajes dentro de Jalisco (solamente 13 registros), lo que genera una representatividad insuficiente para capturar esta combinación específica de características. Aunque la base de datos contiene individualmente registros de hombres, jóvenes universitarios y usuarios de tren ligero, no existe ningún registro que combine todas estas características de manera simultánea, lo que muestra las limitaciones de aplicar consultas muy específicas en esta muestra con la categoría geográfica a la que esta sujeta (Zona Metropolitana del Valle de México ZMVM).


Query 4
¿Cuál es la probabilidad de que un hombre use un vehículo no motorizado cuando la distancia de su viaje es menor a 2 km?

Como no existe una variable que directamente denote la distancia recorrida en los viajes, se utilizá la variable p5_6 (origen de viaje) para entender el propósito del viaje. Ya que se está mapeando la probabilidad de de un hombre utilizar vehículos no motorizados, se asume que las distancias tienen que ser cortas, pues los medios son por bicicleta o caminando. Con este planteamiento, los orígenes del viaje que podrían coincidir con una _distancia corta_ son:

-   Su hogar: 1
-   Escuela: 2
-   Comercio, mercado, tienda o centro comercial: 5
-   Restaurante, bar, cafetería: 9
-   Deportivo, gimnasio: 10
-   Vía pública: 15

De esto, la query se podría modificar como: _¿Cuál es la probabilidad de que un hombre use un vehículo no motorizado cuando el origen es desde su hogar; escuela; comercio, mercado, tienda o centro comercial; restaurante, bar, cafetería; deportivo, gimnasio; o vía pública?_ De este modo, tomamos que sea un hombre utilizando un vehículo no motorizado como el evento y su origen como la evidencia.


```{r}
prob = cpquery(
  bn_mle,
  event = (sexo == "1" & (p5_14_07 == "1" | p5_14_14 == "1")),
  evidence = ((p5_6 == "01" | p5_6 == "02" | p5_6 == "05" |
     p5_6 == "09" | p5_6 == "10" | p5_6 == "15")),
  n = 10^6
)

cat("Probabilidad de que un hombre use un vehículo no motorizado dado que el origen es desde su hogar; escuela; comercio, mercado, tienda o centro comercial; restaurante, bar, cafetería; deportivo, gimnasio; o vía pública", prob)

```


